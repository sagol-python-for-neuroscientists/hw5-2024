import pathlib
from typing import Tuple, Union

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]): # Intiialize the class with the data file name
        try:
            self.data_fname = pathlib.Path(data_fname).resolve()
        except TypeError: # If input is not a string or a pathlib.Path object, raise error
            print("ERROR: You can only use a pathlib.Path or a string.")
            raise
        if not self.data_fname.exists(): # If file does not exist, raise error
            raise ValueError(f"The file you asked for, does not exist.") 

    def read_data(self): # Read the data from the file and decode it
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

    Returns
    -------
    hist : np.ndarray
    Number of people in a given bin
    bins : np.ndarray
    Bin edges
    """
        self.data['age'] = pd.to_numeric(self.data['age'], errors='coerce') # Ensure age is numeric, errors added to NaN
        valid_ages = self.data['age'].dropna() # Remove NaN ages2

        bins = np.arange(0, 101, 10) # Define the bin edges
        hist, bins = np.histogram(valid_ages, bins=bins) # Calculate the histogram
        # Plot the histogram
        #plt.hist(valid_ages, bins=bins, edgecolor='black')
        #plt.xlabel('Age')  
        #plt.ylabel('Number of Participants') 
        #plt.title('Age Distribution of Participants') 
        #plt.show() 
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
    A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
    the (ordinal) index after a reset.
    """
      
        valid_email_indices = [] # Define a list for valid email indices

        # Loop through each email, if valid, add to list
        for i, email in enumerate(self.data["email"]):
            if self._validate_email(email):
                valid_email_indices.append(i)

        valid_emails_df = self.data.loc[valid_email_indices] # Filter for only valid emails
        valid_emails_df = valid_emails_df.reset_index(drop=True) # Reset index
        return valid_emails_df

    def _validate_email(self, email: str) -> bool:
        """Validates an email address.
        """
        # Check conditions to determine if email is valid
        if "@" not in email:
            return False
        if "." not in email:
            return False
        if email.endswith(".") or email.endswith("@"):
            return False
        if email.startswith(".") or email.startswith("@"):
            return False
        if not email.isascii():
            return False
        if email.count("@") != 1:
            return False
        if email[email.find("@") + 1] == ".":
            return False
        return True

    def _find_rows_with_nulls(self) -> np.ndarray:
        """ Finds the rows with missing values in the DataFrame."""
        grades = self.data.loc[:, "q1":"q5"]
        null_rows = grades.loc[
            grades.isna().any(axis=1)
        ].index.to_numpy()
        return null_rows

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
    all questions, and replaces that missing value with the mean of the
    other grades for that student.

    Returns
    -------
    df : pd.DataFrame
    The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
        Row indices of the students that their new grades were generated
    """
    
        null_rows = self.data.loc[:, "q1":"q5"].isna().any(axis=1).to_numpy().nonzero()[0] # Find rows with NA values
        grades = self.data.loc[:, "q1":"q5"].copy() # Copy the grades

        for i in range(len(grades)): # Loop through each row
            mean_value = grades.iloc[i].mean() # Calculate the mean of the row
            grades.iloc[i] = grades.iloc[i].fillna(mean_value) # Fill NA values with mean

        new_data = self.data.copy() # Copy the data
        new_data.loc[:, "q1":"q5"] = grades # Replace the original grades with filled grades
        return new_data, null_rows

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
    
        qcolumns = self.data.loc[:, "q1":"q5"] # Select the columns
        scores = []

        for index, row in qcolumns.iterrows(): # Loop through each row
            num_nans = row.isna().sum() # Count the number of NaN values

            if num_nans > maximal_nans_per_sub: # If there are more NaNs than allowed, score is NA
                scores.append(pd.NA)
            else:
                mean_score = int(row.mean()) # Calculate the mean of the row
                scores.append(mean_score)

        self.data["score"] = pd.Series(scores, dtype="UInt8") # Assign the scores to the new column
        return self.data # Return the DataFrame with the new score column

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
    and the score for all five questions.

    Returns
    -------
    pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
    """
        data = self.data

        data_no_null_ages = data.dropna(axis=0, subset=["age"]) # Drop rows where the 'age' column has NaN values

        df_no_null_ages = data_no_null_ages.set_index(["gender", "age"], append=True)

        questions_df = df_no_null_ages.loc[:, "q1":"q5"] # columns from 'q1' to 'q5'

        age_grouping_function = lambda age: age > 40 # lambda function to categorize age

        grps = questions_df.groupby([None, age_grouping_function], level=[1, 2]) # Group by gender and whether age is above 40

        result = grps.mean()
        
        return result
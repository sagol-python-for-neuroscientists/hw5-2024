import pathlib
import re
from typing import Union, Tuple

import numpy as np
import pandas as pd


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        try:
            self.data_fname = pathlib.Path(data_fname).resolve()
            self.data = pd.DataFrame()
        except TypeError:
            raise ValueError(f"Supports a string or pathlib.Path input")
        if not self.data_fname.exists():
            raise ValueError(f"File {str(self.data_fname)} does not exist")

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.
        Returns
        -------
        hist : np.ndarray
          Number of people in a given bin
        bins : np.ndarray
          Bin edges
            """

        bins = np.linspace(0, 100, 11)
        ages = self.data['age']
        return np.histogram(ages, bins=bins)

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.
        Returns
        -------
        df : pd.DataFrame
          A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
          the (ordinal) index after a reset.
            """
        invalid_emails = self.data[~self.data['email'].apply(_is_valid_email)]
        invalid_ids = invalid_emails["id"].tolist()

        df = self.data[~self.data['id'].isin(invalid_ids)]
        df = df.reset_index(drop=True)

        return df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
      The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
          Row indices of the students that their new grades were generated
        """
        df = self.data.copy()

        indices = []
        for index, row in df.iterrows():
            grades = row.loc["q1":"q5"]
            if grades.isna().any():
                mean = grades.mean()
                df.loc[index, "q1":"q5"] = grades.fillna(mean)
                indices.append(index)

        return df, np.array(indices)

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df = self.data.copy()

        df['score'] = df.loc[:, 'q1':'q5'].mean(axis=1).astype("uint8").astype("UInt8")

        df.loc[df.loc[:, 'q1':'q5'].isna().sum(axis=1) > maximal_nans_per_sub, 'score'] = pd.NA

        return df

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

    Returns
    -------
    pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
    """

        df = self.data.dropna(subset=["age"]).set_index(["gender", "age"], append=True)
        question_columns = df.loc[:, "q1":"q5"]

        groups = question_columns.groupby([df.index.get_level_values("gender"),
                                           df.index.get_level_values("age").map(lambda age: age > 40)])

        return groups.mean()


def _is_valid_email(email: str) -> bool:
    regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z]{1,}$'
    return re.match(regex, email) is not None
